package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"book-service/graph/model"
	"context"
	"errors"
	"fmt"
)

// AddBook is the resolver for the addBook field.
func (r *mutationResolver) AddBook(ctx context.Context, title string, author string, publishedYear int32) (*model.Book, error) {
	book := &model.Book{
		ID:            fmt.Sprintf("%d", len(r.Books)+1), // Simple ID generation
		Title:         title,
		Author:        author,
		PublishedYear: publishedYear,
	}
	r.Books = append(r.Books, book)
	return book, nil
}

// GetBooks is the resolver for the getBooks field.
func (r *queryResolver) GetBooks(ctx context.Context) ([]*model.Book, error) {
	return r.Books, nil
}

// GetBookByID is the resolver for the getBookByID field.
func (r *queryResolver) GetBookByID(ctx context.Context, id string) (*model.Book, error) {
	for _, book := range r.Books {
		if book.ID == id {
			return book, nil
		}
	}
	return nil, errors.New("book not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
