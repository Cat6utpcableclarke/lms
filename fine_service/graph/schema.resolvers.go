package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.71

import (
	"context"
	"database/sql"
	"fine_service/graph/model"
	"fmt"
)

// CreateFine is the resolver for the createFine field.
func (r *mutationResolver) CreateFine(ctx context.Context, daysLate int32, ratePerDay float64) (*model.Fine, error) {
	amount := float64(daysLate) * ratePerDay

	query := `
		INSERT INTO fines (days_late, rate_per_day, amount)
		VALUES ($1, $2, $3)
		RETURNING id, days_late, rate_per_day, amount
	`
	row := r.DB.QueryRowContext(ctx, query, daysLate, ratePerDay, amount)

	var fine model.Fine
	err := row.Scan(&fine.ID, &fine.DaysLate, &fine.RatePerDay, &fine.Amount)
	if err != nil {
		return nil, fmt.Errorf("failed to create fine: %w", err)
	}

	return &fine, nil
}

// UpdateFine is the resolver for the updateFine field.
func (r *mutationResolver) UpdateFine(ctx context.Context, id string, daysLate int32, ratePerDay float64) (*model.Fine, error) {
	amount := float64(daysLate) * ratePerDay

	query := `
		UPDATE fines
		SET days_late = $2,
		    rate_per_day = $3,
		    amount = $4
		WHERE id = $1
		RETURNING id, days_late, rate_per_day, amount
	`

	row := r.DB.QueryRowContext(ctx, query, id, daysLate, ratePerDay, amount)

	var fine model.Fine
	err := row.Scan(&fine.ID, &fine.DaysLate, &fine.RatePerDay, &fine.Amount)
	if err != nil {
		return nil, fmt.Errorf("failed to update fine: %w", err)
	}

	return &fine, nil
}

// DeleteFine is the resolver for the deleteFine field.
func (r *mutationResolver) DeleteFine(ctx context.Context, id string) (bool, error) {
	result, err := r.DB.ExecContext(ctx, `DELETE FROM fines WHERE id = $1`, id)
	if err != nil {
		return false, fmt.Errorf("failed to delete fine: %w", err)
	}

	rowsAffected, _ := result.RowsAffected()
	return rowsAffected > 0, nil
}

// GetFine is the resolver for the getFine field.
func (r *queryResolver) GetFine(ctx context.Context, id string) (*model.Fine, error) {
	query := `SELECT id, days_late, rate_per_day, amount FROM fines WHERE id = $1`
	row := r.DB.QueryRowContext(ctx, query, id)

	var fine model.Fine
	err := row.Scan(&fine.ID, &fine.DaysLate, &fine.RatePerDay, &fine.Amount)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("fine not found")
		}
		return nil, fmt.Errorf("failed to retrieve fine: %w", err)
	}

	return &fine, nil
}

// ListFines is the resolver for the listFines field.
func (r *queryResolver) ListFines(ctx context.Context) ([]*model.Fine, error) {
	rows, err := r.DB.QueryContext(ctx, `SELECT id, days_late, rate_per_day, amount FROM fines`)
	if err != nil {
		return nil, fmt.Errorf("failed to query fines: %w", err)
	}
	defer rows.Close()

	var fines []*model.Fine
	for rows.Next() {
		var fine model.Fine
		if err := rows.Scan(&fine.ID, &fine.DaysLate, &fine.RatePerDay, &fine.Amount); err != nil {
			return nil, err
		}
		fines = append(fines, &fine)
	}

	return fines, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
