type Patron {
  patron_id: ID!
  first_name: String!
  last_name: String!
  phone_number: String!
  membership: Membership
  status: PatronStatus
  violations: [ViolationRecord]
  reservations: [Reservation]
  borrowed_books: [BorrowedBook]
}

type Membership {
  membership_id: ID!
  patron: Patron!
  level: MembershipLevel!
}

enum MembershipLevel {
  BRONZE
  SILVER
  GOLD
}

type PatronStatus {
  patron: Patron!
  warning_count: Int!
  patron_status: Status!
  unpaid_fees: Float!
}

enum Status {
  GOOD
  WARNED
  BANNED
  PENDING
}

type ViolationRecord {
  violation_record_id: ID!
  patron: Patron!
  violation_type: ViolationType!
  violation_info: String!
}

enum ViolationType {
  LATE_RETURN
  UNPAID_FEES
  DAMAGED_BOOK
}

type Reservation {
  reservation_id: ID!
  patron: Patron!
  book_id: ID! # External reference to book service
  reservation_date: String!
  status: ReservationStatus!
}

enum ReservationStatus {
  PENDING
  FULFILLED
  CANCELED
}

type BorrowedBook {
  borrow_id: ID!
  patron: Patron!
  book_id: ID! # External reference to book service
  borrow_date: String!
  due_date: String!
  return_date: String
}

type Query {
  getPatron(patron_id: ID!): Patron
  getAllPatrons: [Patron]
  getReservationsByPatron(patron_id: ID!): [Reservation]
  getBorrowedBooksByPatron(patron_id: ID!): [BorrowedBook]
}

type Mutation {
  createPatron(first_name: String!, last_name: String!, phone_number: String!): Patron
  updatePatronStatus(patron_id: ID!, patron_status: Status!): PatronStatus
  addViolation(patron_id: ID!, violation_type: ViolationType!, violation_info: String!): ViolationRecord
  createReservation(patron_id: ID!, book_id: ID!): Reservation
  updateReservationStatus(reservation_id: ID!, status: ReservationStatus!): Reservation
  borrowBook(patron_id: ID!, book_id: ID!, due_date: String!): BorrowedBook
  returnBook(borrow_id: ID!, return_date: String!): BorrowedBook
}
