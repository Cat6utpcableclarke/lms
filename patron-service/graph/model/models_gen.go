// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BorrowedBook struct {
	BorrowID   string  `json:"borrow_id"`
	Patron     *Patron `json:"patron"`
	BookID     string  `json:"book_id"`
	BorrowDate string  `json:"borrow_date"`
	DueDate    string  `json:"due_date"`
	ReturnDate *string `json:"return_date,omitempty"`
}

type Membership struct {
	MembershipID string          `json:"membership_id"`
	Patron       *Patron         `json:"patron"`
	Level        MembershipLevel `json:"level"`
}

type Mutation struct {
}

type Patron struct {
	PatronID      string             `json:"patron_id"`
	FirstName     string             `json:"first_name"`
	LastName      string             `json:"last_name"`
	PhoneNumber   string             `json:"phone_number"`
	Membership    *Membership        `json:"membership,omitempty"`
	Status        *PatronStatus      `json:"status,omitempty"`
	Violations    []*ViolationRecord `json:"violations,omitempty"`
	Reservations  []*Reservation     `json:"reservations,omitempty"`
	BorrowedBooks []*BorrowedBook    `json:"borrowed_books,omitempty"`
}

type PatronStatus struct {
	Patron       *Patron `json:"patron"`
	WarningCount int32   `json:"warning_count"`
	PatronStatus Status  `json:"patron_status"`
	UnpaidFees   float64 `json:"unpaid_fees"`
}

type Query struct {
}

type Reservation struct {
	ReservationID   string            `json:"reservation_id"`
	Patron          *Patron           `json:"patron"`
	BookID          string            `json:"book_id"`
	ReservationDate string            `json:"reservation_date"`
	Status          ReservationStatus `json:"status"`
}

type ViolationRecord struct {
	ViolationRecordID string        `json:"violation_record_id"`
	Patron            *Patron       `json:"patron"`
	ViolationType     ViolationType `json:"violation_type"`
	ViolationInfo     string        `json:"violation_info"`
}

type MembershipLevel string

const (
	MembershipLevelBronze MembershipLevel = "BRONZE"
	MembershipLevelSilver MembershipLevel = "SILVER"
	MembershipLevelGold   MembershipLevel = "GOLD"
)

var AllMembershipLevel = []MembershipLevel{
	MembershipLevelBronze,
	MembershipLevelSilver,
	MembershipLevelGold,
}

func (e MembershipLevel) IsValid() bool {
	switch e {
	case MembershipLevelBronze, MembershipLevelSilver, MembershipLevelGold:
		return true
	}
	return false
}

func (e MembershipLevel) String() string {
	return string(e)
}

func (e *MembershipLevel) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MembershipLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MembershipLevel", str)
	}
	return nil
}

func (e MembershipLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReservationStatus string

const (
	ReservationStatusPending   ReservationStatus = "PENDING"
	ReservationStatusFulfilled ReservationStatus = "FULFILLED"
	ReservationStatusCanceled  ReservationStatus = "CANCELED"
)

var AllReservationStatus = []ReservationStatus{
	ReservationStatusPending,
	ReservationStatusFulfilled,
	ReservationStatusCanceled,
}

func (e ReservationStatus) IsValid() bool {
	switch e {
	case ReservationStatusPending, ReservationStatusFulfilled, ReservationStatusCanceled:
		return true
	}
	return false
}

func (e ReservationStatus) String() string {
	return string(e)
}

func (e *ReservationStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReservationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReservationStatus", str)
	}
	return nil
}

func (e ReservationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusGood    Status = "GOOD"
	StatusWarned  Status = "WARNED"
	StatusBanned  Status = "BANNED"
	StatusPending Status = "PENDING"
)

var AllStatus = []Status{
	StatusGood,
	StatusWarned,
	StatusBanned,
	StatusPending,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusGood, StatusWarned, StatusBanned, StatusPending:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ViolationType string

const (
	ViolationTypeLateReturn  ViolationType = "LATE_RETURN"
	ViolationTypeUnpaidFees  ViolationType = "UNPAID_FEES"
	ViolationTypeDamagedBook ViolationType = "DAMAGED_BOOK"
)

var AllViolationType = []ViolationType{
	ViolationTypeLateReturn,
	ViolationTypeUnpaidFees,
	ViolationTypeDamagedBook,
}

func (e ViolationType) IsValid() bool {
	switch e {
	case ViolationTypeLateReturn, ViolationTypeUnpaidFees, ViolationTypeDamagedBook:
		return true
	}
	return false
}

func (e ViolationType) String() string {
	return string(e)
}

func (e *ViolationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ViolationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ViolationType", str)
	}
	return nil
}

func (e ViolationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
