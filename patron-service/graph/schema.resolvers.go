package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/GSalise/lms/patron-service/graph/model"
)

// CreatePatron is the resolver for the createPatron field.
func (r *mutationResolver) CreatePatron(ctx context.Context, firstName string, lastName string, phoneNumber string) (*model.Patron, error) {
	panic(fmt.Errorf("not implemented: CreatePatron - createPatron"))
}

// UpdatePatronStatus is the resolver for the updatePatronStatus field.
func (r *mutationResolver) UpdatePatronStatus(ctx context.Context, patronID string, patronStatus model.Status) (*model.PatronStatus, error) {
	panic(fmt.Errorf("not implemented: UpdatePatronStatus - updatePatronStatus"))
}

// AddViolation is the resolver for the addViolation field.
func (r *mutationResolver) AddViolation(ctx context.Context, patronID string, violationType model.ViolationType, violationInfo string) (*model.ViolationRecord, error) {
	panic(fmt.Errorf("not implemented: AddViolation - addViolation"))
}

// GetPatron is the resolver for the getPatron field.
func (r *queryResolver) GetPatron(ctx context.Context, patronID string) (*model.Patron, error) {
	panic(fmt.Errorf("not implemented: GetPatron - getPatron"))
}

// GetAllPatrons is the resolver for the getAllPatrons field.
func (r *queryResolver) GetAllPatrons(ctx context.Context) ([]*model.Patron, error) {
	panic(fmt.Errorf("not implemented: GetAllPatrons - getAllPatrons"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
